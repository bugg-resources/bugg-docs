{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bugg \u00b6 Documentation for the Bugg real-time eco-acoustic monitoring devices. Please note, Bugg is currently in private preview and not available for general purchase. We are working towards a wider launch, and to keep informed please join our mailing list at bugg.xyz .","title":"Home"},{"location":"#bugg","text":"Documentation for the Bugg real-time eco-acoustic monitoring devices. Please note, Bugg is currently in private preview and not available for general purchase. We are working towards a wider launch, and to keep informed please join our mailing list at bugg.xyz .","title":"Bugg"},{"location":"advanced/","text":"Advanced \u00b6 For advanced users familiar with embedded systems firmware development who would like to modify or perform advanced troubleshooting on Buggs, there are convenient interfaces for shell access and flashing custom images to the Raspberry Pi Compute Module 4 in the Bugg device. Shell access \u00b6 You can gain shell access to the Raspberry Pi Compute Module 4 through a serial interface exposed through the connector at the bottom of the Bugg device. This is particularly useful for debugging the device without needing to open it up. To access the serial interface, connect using the USB pins on the M12 connector. Open access resources \u00b6 All design and manufacturing files for Bugg are provided openly under the bugg-resources GitHub organisation under a CC BY-NC-SA 4.0 license. Key resources include: Design overview and assembly instructions: bugg-handover Firmware: bugg-cm4-firmware Enclosure 3D CAD files: bugg-enclosure Individual PCB eCAD files: sp-hardware-main , sp-hardware-mic , sp-hardware-led Panellised PCB eCAD files and BoM: sp-hardware-panel","title":"Advanced"},{"location":"advanced/#advanced","text":"For advanced users familiar with embedded systems firmware development who would like to modify or perform advanced troubleshooting on Buggs, there are convenient interfaces for shell access and flashing custom images to the Raspberry Pi Compute Module 4 in the Bugg device.","title":"Advanced"},{"location":"advanced/#shell-access","text":"You can gain shell access to the Raspberry Pi Compute Module 4 through a serial interface exposed through the connector at the bottom of the Bugg device. This is particularly useful for debugging the device without needing to open it up. To access the serial interface, connect using the USB pins on the M12 connector.","title":"Shell access"},{"location":"advanced/#open-access-resources","text":"All design and manufacturing files for Bugg are provided openly under the bugg-resources GitHub organisation under a CC BY-NC-SA 4.0 license. Key resources include: Design overview and assembly instructions: bugg-handover Firmware: bugg-cm4-firmware Enclosure 3D CAD files: bugg-enclosure Individual PCB eCAD files: sp-hardware-main , sp-hardware-mic , sp-hardware-led Panellised PCB eCAD files and BoM: sp-hardware-panel","title":"Open access resources"},{"location":"audio/","text":"Audio \u00b6 Recording cycle \u00b6 By default, Bugg is designed to record compressed MP3 audio files continuously (24/7) without breaks between recordings. Bugg runs concurrent threads to handle simultaneous recording and compressing/uploading of audio data. If enabled, compression begins immediately after the audio file has finished recording. To manage CPU load, server uploads are always begun out-of-sync with the audio recording loop. The default recording cycle behaviour (300s files, compression enabled) is depicted below: Many of Bugg's audio recording parameters (e.g., sampling rate, gap between files, compression) can be modified through the configuration file . A modified configuration, which called for 60s uncompressed audio files separated by 140s gaps, would result in the below cycle: Currently, there is no option to record only certain hours of the day (e.g., focussed at dawn or dusk). Whilst it is possible to implement this feature in software through modifications to the firmware , the idling power draw of the Raspberry Pi CM4 is relatively high so this would not result in significant overall power savings. MP3 compression \u00b6 If compression is enabled, Bugg uses FFMPEG's highest quality variable bit rate (VBR) MP3 compression (220-260 kb/s). We have found, for a wide range of eco-acoustic data, this compression scheme produces approximately 1.2 GB of audio data per day per device (at 44.1 kHz sampling rate). Please note that since MP3 uses perceptual audio coding (i.e., is tuned to the frequencies that humans are most sensitive to) it will not work for ultrasonic data. Other compression schemes have not yet been implemented, but for those able to modify firmware it should be relatively straightforward to try alternatives. Hardware \u00b6 Bugg can record audio from either the integrated microphone, or (in v2) from an external microphone connected through the M12 connector. The choice of audio recording interface is set through the configuration file . Integrated microphone \u00b6 A MEMs microphone is integrated into each Bugg device, which is weatherproofed by an acoustic vent and interfaced through a horn on the device enclosure. Knowles SPH0641LU4H-1 \u00b6 The integrated microphone in Bugg is a Knowles SPH0641LU4H-1 PDM microphone. Full specifications are in the microphone's documentation , but a few key details are: Omnidirectional Supported sampling frequencies: 100 Hz - 80 kHz Sensitivity: -26dB \u00b11dB @ 94dB SPL Signal to noise ratio: 64.3dB Acoustic membrane \u00b6 Between the microphone and the outside world is a breathable ePTFE membrane (similar to GORE MEMS Protective Vents ). Whilst the aim of this vent is to be acoustically transparent, in reality it will still attenuate recorded acoustic signals slightly. Nonetheless, it is required for weatherproofing as any water ingress into the Knowles microphone is likely to result in a total device failure. Microphone horn \u00b6 The Bugg enclosure has a slight horn around the hole for the integrated microphone. This is primarily to amplify acoustic signals, however it comes at the cost of increased directionality of recordings. For an excellent deep dive into the topic of microphone design for eco-acoustic applications, see Darras et al. 2018 . External microphones \u00b6 Coming soon..!","title":"Audio"},{"location":"audio/#audio","text":"","title":"Audio"},{"location":"audio/#recording-cycle","text":"By default, Bugg is designed to record compressed MP3 audio files continuously (24/7) without breaks between recordings. Bugg runs concurrent threads to handle simultaneous recording and compressing/uploading of audio data. If enabled, compression begins immediately after the audio file has finished recording. To manage CPU load, server uploads are always begun out-of-sync with the audio recording loop. The default recording cycle behaviour (300s files, compression enabled) is depicted below: Many of Bugg's audio recording parameters (e.g., sampling rate, gap between files, compression) can be modified through the configuration file . A modified configuration, which called for 60s uncompressed audio files separated by 140s gaps, would result in the below cycle: Currently, there is no option to record only certain hours of the day (e.g., focussed at dawn or dusk). Whilst it is possible to implement this feature in software through modifications to the firmware , the idling power draw of the Raspberry Pi CM4 is relatively high so this would not result in significant overall power savings.","title":"Recording cycle"},{"location":"audio/#mp3-compression","text":"If compression is enabled, Bugg uses FFMPEG's highest quality variable bit rate (VBR) MP3 compression (220-260 kb/s). We have found, for a wide range of eco-acoustic data, this compression scheme produces approximately 1.2 GB of audio data per day per device (at 44.1 kHz sampling rate). Please note that since MP3 uses perceptual audio coding (i.e., is tuned to the frequencies that humans are most sensitive to) it will not work for ultrasonic data. Other compression schemes have not yet been implemented, but for those able to modify firmware it should be relatively straightforward to try alternatives.","title":"MP3 compression"},{"location":"audio/#hardware","text":"Bugg can record audio from either the integrated microphone, or (in v2) from an external microphone connected through the M12 connector. The choice of audio recording interface is set through the configuration file .","title":"Hardware"},{"location":"audio/#integrated-microphone","text":"A MEMs microphone is integrated into each Bugg device, which is weatherproofed by an acoustic vent and interfaced through a horn on the device enclosure.","title":"Integrated microphone"},{"location":"audio/#knowles-sph0641lu4h-1","text":"The integrated microphone in Bugg is a Knowles SPH0641LU4H-1 PDM microphone. Full specifications are in the microphone's documentation , but a few key details are: Omnidirectional Supported sampling frequencies: 100 Hz - 80 kHz Sensitivity: -26dB \u00b11dB @ 94dB SPL Signal to noise ratio: 64.3dB","title":"Knowles SPH0641LU4H-1"},{"location":"audio/#acoustic-membrane","text":"Between the microphone and the outside world is a breathable ePTFE membrane (similar to GORE MEMS Protective Vents ). Whilst the aim of this vent is to be acoustically transparent, in reality it will still attenuate recorded acoustic signals slightly. Nonetheless, it is required for weatherproofing as any water ingress into the Knowles microphone is likely to result in a total device failure.","title":"Acoustic membrane"},{"location":"audio/#microphone-horn","text":"The Bugg enclosure has a slight horn around the hole for the integrated microphone. This is primarily to amplify acoustic signals, however it comes at the cost of increased directionality of recordings. For an excellent deep dive into the topic of microphone design for eco-acoustic applications, see Darras et al. 2018 .","title":"Microphone horn"},{"location":"audio/#external-microphones","text":"Coming soon..!","title":"External microphones"},{"location":"config/","text":"Configuration \u00b6 Overview \u00b6 The Bugg device loads its configuration from a config.json file which must be placed on the microSD card inserted into the device . The name of the configuration file must be exact or the device will not be able to locate it. A single config.json file can be used for multiple Buggs under the same project (assuming SIM cards are on similar plans). There is no need to change any parameters within the configuration file to individually identify devices. Devices are uniquely identified by a unique hardware ID baked into the CPU of each device, which is either printed on the enclosure or supplied upon delivery. Structure of config.json \u00b6 There are four main components of the config.json file: General information Audio recording parameters Mobile internet settings Remote server details Configuration files should be based on the below template: { \"device\": { \"gcs_bucket_name\": \"bugg-audio-dropbox\", \"project_id\": \"taiwan\", \"config_id\": \"a35c532\" }, \"sensor\": { \"record_length\": 300, \"capture_delay\": 0, \"record_freq\": 44100, \"compress_data\": true, \"sensor_type\": \"I2SMic\" }, \"mobile_network\": { \"hostname\": \"internet\", \"password\": \"pass123\", \"username\": \"user\" }, \"type\": \"service_account\", \"project_id\": \"XXXX\", \"private_key_id\": \"XXXX\", \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nXXXX\\n-----END PRIVATE KEY-----\\n\", \"client_email\": \"XXXX\", \"client_id\": \"XXXX\", \"auth_uri\": \"XXXX\", \"token_uri\": \"XXXX\", \"auth_provider_x509_cert_url\": \"XXXX\", \"client_x509_cert_url\": \"XXXX\" } Configuration parameters \u00b6 General information \u00b6 gcs_bucket_name : The name of the GCS bucket that you want audio to be uploaded to project_id : A name for the project config_id : A way to track device configurations (must be manually changed) The values of project_id and config_id will be included in the filename of uploaded audio data on the remote server. Audio recording parameters \u00b6 record_length : Audio file size (seconds) capture_delay : Delay between recording audio files (seconds) record_freq : Audio sampling frequency (Hz) compress_data : Enable/disable MP3 VBR0 audio compression sensor_type : \"I2SMic\" for the onboard MEMS mic, \"XXX\" for external microphones See the audio page for more detail on Bugg audio specifications. Mobile internet settings \u00b6 These settings are specific to both the network provider and mobile data plan used by the nano SIM. hostname : APN hostname username : APN username password : APN password They can easily be found by searching online (e.g., \"Vodafone UK pay monthly APN settings\"), or by inserting the SIM card into a phone and finding the APN details in the relevant settings page of the phone OS. Some mobile providers do not require APN usernames and/or passwords. For these, leave empty strings in the config.json file (e.g., \"username\": \"\" , \"password\": \"\" ) See the connectivity page for more details on mobile internet settings. Remote server details \u00b6 Bugg devices upload audio data to a Google Cloud Storage bucket. The authentication details in the configuration file allow the Bugg to write data to the bucket through a service account. Once you have set up a GCS bucket and a service account with the required permissions, create a new service account key on the GCS console and download it as a JSON file. From the service account key, copy the fields type , project_id , private_key_id , private_key , client_email , client_id , auth_uri , token_uri , auth_provider_x509_cert_url , and client_x509_cert_url to the Bugg configuration file.","title":"Configuration"},{"location":"config/#configuration","text":"","title":"Configuration"},{"location":"config/#overview","text":"The Bugg device loads its configuration from a config.json file which must be placed on the microSD card inserted into the device . The name of the configuration file must be exact or the device will not be able to locate it. A single config.json file can be used for multiple Buggs under the same project (assuming SIM cards are on similar plans). There is no need to change any parameters within the configuration file to individually identify devices. Devices are uniquely identified by a unique hardware ID baked into the CPU of each device, which is either printed on the enclosure or supplied upon delivery.","title":"Overview"},{"location":"config/#structure-of-configjson","text":"There are four main components of the config.json file: General information Audio recording parameters Mobile internet settings Remote server details Configuration files should be based on the below template: { \"device\": { \"gcs_bucket_name\": \"bugg-audio-dropbox\", \"project_id\": \"taiwan\", \"config_id\": \"a35c532\" }, \"sensor\": { \"record_length\": 300, \"capture_delay\": 0, \"record_freq\": 44100, \"compress_data\": true, \"sensor_type\": \"I2SMic\" }, \"mobile_network\": { \"hostname\": \"internet\", \"password\": \"pass123\", \"username\": \"user\" }, \"type\": \"service_account\", \"project_id\": \"XXXX\", \"private_key_id\": \"XXXX\", \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nXXXX\\n-----END PRIVATE KEY-----\\n\", \"client_email\": \"XXXX\", \"client_id\": \"XXXX\", \"auth_uri\": \"XXXX\", \"token_uri\": \"XXXX\", \"auth_provider_x509_cert_url\": \"XXXX\", \"client_x509_cert_url\": \"XXXX\" }","title":"Structure of config.json"},{"location":"config/#configuration-parameters","text":"","title":"Configuration parameters"},{"location":"config/#general-information","text":"gcs_bucket_name : The name of the GCS bucket that you want audio to be uploaded to project_id : A name for the project config_id : A way to track device configurations (must be manually changed) The values of project_id and config_id will be included in the filename of uploaded audio data on the remote server.","title":"General information"},{"location":"config/#audio-recording-parameters","text":"record_length : Audio file size (seconds) capture_delay : Delay between recording audio files (seconds) record_freq : Audio sampling frequency (Hz) compress_data : Enable/disable MP3 VBR0 audio compression sensor_type : \"I2SMic\" for the onboard MEMS mic, \"XXX\" for external microphones See the audio page for more detail on Bugg audio specifications.","title":"Audio recording parameters"},{"location":"config/#mobile-internet-settings","text":"These settings are specific to both the network provider and mobile data plan used by the nano SIM. hostname : APN hostname username : APN username password : APN password They can easily be found by searching online (e.g., \"Vodafone UK pay monthly APN settings\"), or by inserting the SIM card into a phone and finding the APN details in the relevant settings page of the phone OS. Some mobile providers do not require APN usernames and/or passwords. For these, leave empty strings in the config.json file (e.g., \"username\": \"\" , \"password\": \"\" ) See the connectivity page for more details on mobile internet settings.","title":"Mobile internet settings"},{"location":"config/#remote-server-details","text":"Bugg devices upload audio data to a Google Cloud Storage bucket. The authentication details in the configuration file allow the Bugg to write data to the bucket through a service account. Once you have set up a GCS bucket and a service account with the required permissions, create a new service account key on the GCS console and download it as a JSON file. From the service account key, copy the fields type , project_id , private_key_id , private_key , client_email , client_id , auth_uri , token_uri , auth_provider_x509_cert_url , and client_x509_cert_url to the Bugg configuration file.","title":"Remote server details"},{"location":"connectivity/","text":"Connectivity \u00b6 Overview \u00b6 Bugg devices can be connected to the internet to upload audio data (~1.2GB/day compressed ) and debug logs to a remote server in near real-time. When an audio file is recorded by Bugg, it is always first stored to the microSD card. Then, when an upload is initiated in the recording cycle , Bugg attempts to upload all local audio on the microSD to the remote server. If a file is uploaded successfully, the local file is deleted. If the upload is unsucessful, the local file is kept, and the upload is retried on the next cycle. This safe uploading approach allows Bugg to continue recording continuous datasets through intermittent drops in internet connectivity. Mobile internet \u00b6 With a nano SIM , Bugg uploads audio data in near real-time using a mobile internet connection. Globally, Bugg will connect to 4G LTE networks where possible. In Europe, the Middle East, Africa (EMEA), and Australia there is 3G fallback for areas without 4G coverage. The connection is facilitated by the embedded Sierra Wireless RC7620 IoT module. Google Cloud Storage \u00b6 Bugg uploads audio data and debug logs to a Google Cloud Storage (GCS) bucket . One-off server setup \u00b6 There are some one-off steps that must be done on the Google Cloud Console to setup a bucket ready for your Bugg devices to upload to. Multiple devices can upload to a single bucket, so this must only be done once per project. 1. Create a project : On the cloud console, create a new project (nav. menu -> IAM and admin -> Create a project) 2. Create a bucket : On the cloud console, navigate to buckets (nav. menu -> Cloud Storage -> Buckets) and click the \"Create\" button at the top of the page. Follow the step-by-step guide. 3. Create a service account : To allow the Bugg to access the bucket, set up a service account (nav. menu -> IAM and admin -> Service Accounts) and click the \"Create Service Account\" button at the top of the page. Follow the step-by-step guide, and give the newly created service account the \"Storage Object Creator\" role for your bucket (see security note). 4. Export service account key : On your newly created service account (selected from table on nav. menu -> IAM and admin -> Service Accounts), select the \"Keys\" tab, then click: Add key -> Create new key. On the pop-up, select the \"JSON\" format and click create. Keep this downloaded file safe as it has details for your Bugg configuration file and cannot be downloaded again . If you do lose it, you will have to generate a new key for the service account. GCS security \u00b6 Since Buggs are typically deployed unattended for long durations, and the firmware is open source, the service account information that is stored on the device's configuration file can theoretically be stolen by a malicious actor. It is therefore important that you do not give the service account unneccessary permissions (e.g., do not let it read or edit data in the GCS bucket). If a service account key is stolen and misused, it can be disabled on the Google Cloud Console. However, this will then mean that all Buggs sharing the same key will not be able to upload data, and will enter offline mode, until the configuration file is updated with a new active GCS key. It is strongly advised that the bucket that the Bugg uploads to is not used for central dataset storage. Instead, we recommend that an appropriate automated service is configured (running on GCS or elsewhere using e.g., the Python API ) to regularly move data from the Bugg bucket to a more secure location (another bucket, or another storage provider). In this way, the Bugg bucket is simply used as a temporary dropbox, and long-term data storage is kept more secure. GCS costs \u00b6 Storage costs for GCS buckets are relatively inexpensive (~$20/TB/month). However, GCS charges relatively high \"General network usage\" fees for downloading data from buckets, or moving data to non-GCS services (~$120/TB). These can become significant if you are moving large volumes of audio data regularly. Choosing nearline, coldline, or archive storage for your bucket might seem an attractive option due to the lower storage costs. However, do note that these options will incur additional retrieval fees (up to $50/TB) when you want to access/download/move your data. There are two recommended approaches to manage Bugg GCS costs: As soon as audio is uploaded to the Bugg bucket, copy it to a local server and delete it from GCS Use Google Cloud for your full analysis pipeline and only download results or small amounts of audio as needed Offline mode \u00b6 If online operation is not desired or possible, the device can be run in offline mode without a nano SIM, and audio can be retrieved manually from the microSD card at the end of deployments. Audio from offline Buggs can be uploaded through the same pipeline that online devices use, i.e., to the same GCS bucket in the same file formats, using the bugg-offline-uploader command line tool . Please note, the offline uploader tool was built for devices using the Bugg web app (not openly available), but should work for other GCS buckets.","title":"Connectivity"},{"location":"connectivity/#connectivity","text":"","title":"Connectivity"},{"location":"connectivity/#overview","text":"Bugg devices can be connected to the internet to upload audio data (~1.2GB/day compressed ) and debug logs to a remote server in near real-time. When an audio file is recorded by Bugg, it is always first stored to the microSD card. Then, when an upload is initiated in the recording cycle , Bugg attempts to upload all local audio on the microSD to the remote server. If a file is uploaded successfully, the local file is deleted. If the upload is unsucessful, the local file is kept, and the upload is retried on the next cycle. This safe uploading approach allows Bugg to continue recording continuous datasets through intermittent drops in internet connectivity.","title":"Overview"},{"location":"connectivity/#mobile-internet","text":"With a nano SIM , Bugg uploads audio data in near real-time using a mobile internet connection. Globally, Bugg will connect to 4G LTE networks where possible. In Europe, the Middle East, Africa (EMEA), and Australia there is 3G fallback for areas without 4G coverage. The connection is facilitated by the embedded Sierra Wireless RC7620 IoT module.","title":"Mobile internet"},{"location":"connectivity/#google-cloud-storage","text":"Bugg uploads audio data and debug logs to a Google Cloud Storage (GCS) bucket .","title":"Google Cloud Storage"},{"location":"connectivity/#one-off-server-setup","text":"There are some one-off steps that must be done on the Google Cloud Console to setup a bucket ready for your Bugg devices to upload to. Multiple devices can upload to a single bucket, so this must only be done once per project. 1. Create a project : On the cloud console, create a new project (nav. menu -> IAM and admin -> Create a project) 2. Create a bucket : On the cloud console, navigate to buckets (nav. menu -> Cloud Storage -> Buckets) and click the \"Create\" button at the top of the page. Follow the step-by-step guide. 3. Create a service account : To allow the Bugg to access the bucket, set up a service account (nav. menu -> IAM and admin -> Service Accounts) and click the \"Create Service Account\" button at the top of the page. Follow the step-by-step guide, and give the newly created service account the \"Storage Object Creator\" role for your bucket (see security note). 4. Export service account key : On your newly created service account (selected from table on nav. menu -> IAM and admin -> Service Accounts), select the \"Keys\" tab, then click: Add key -> Create new key. On the pop-up, select the \"JSON\" format and click create. Keep this downloaded file safe as it has details for your Bugg configuration file and cannot be downloaded again . If you do lose it, you will have to generate a new key for the service account.","title":"One-off server setup"},{"location":"connectivity/#gcs-security","text":"Since Buggs are typically deployed unattended for long durations, and the firmware is open source, the service account information that is stored on the device's configuration file can theoretically be stolen by a malicious actor. It is therefore important that you do not give the service account unneccessary permissions (e.g., do not let it read or edit data in the GCS bucket). If a service account key is stolen and misused, it can be disabled on the Google Cloud Console. However, this will then mean that all Buggs sharing the same key will not be able to upload data, and will enter offline mode, until the configuration file is updated with a new active GCS key. It is strongly advised that the bucket that the Bugg uploads to is not used for central dataset storage. Instead, we recommend that an appropriate automated service is configured (running on GCS or elsewhere using e.g., the Python API ) to regularly move data from the Bugg bucket to a more secure location (another bucket, or another storage provider). In this way, the Bugg bucket is simply used as a temporary dropbox, and long-term data storage is kept more secure.","title":"GCS security"},{"location":"connectivity/#gcs-costs","text":"Storage costs for GCS buckets are relatively inexpensive (~$20/TB/month). However, GCS charges relatively high \"General network usage\" fees for downloading data from buckets, or moving data to non-GCS services (~$120/TB). These can become significant if you are moving large volumes of audio data regularly. Choosing nearline, coldline, or archive storage for your bucket might seem an attractive option due to the lower storage costs. However, do note that these options will incur additional retrieval fees (up to $50/TB) when you want to access/download/move your data. There are two recommended approaches to manage Bugg GCS costs: As soon as audio is uploaded to the Bugg bucket, copy it to a local server and delete it from GCS Use Google Cloud for your full analysis pipeline and only download results or small amounts of audio as needed","title":"GCS costs"},{"location":"connectivity/#offline-mode","text":"If online operation is not desired or possible, the device can be run in offline mode without a nano SIM, and audio can be retrieved manually from the microSD card at the end of deployments. Audio from offline Buggs can be uploaded through the same pipeline that online devices use, i.e., to the same GCS bucket in the same file formats, using the bugg-offline-uploader command line tool . Please note, the offline uploader tool was built for devices using the Bugg web app (not openly available), but should work for other GCS buckets.","title":"Offline mode"},{"location":"contact/","text":"Contact \u00b6 Please be reminded that Bugg is a research tool , and not a commercial device , therefore there are no guarantees, warantees, or official support channels. For further questions, clarifications, or recommended additions to the documentation please reach out to Dr. Sarab Sethi by email.","title":"Contact"},{"location":"contact/#contact","text":"Please be reminded that Bugg is a research tool , and not a commercial device , therefore there are no guarantees, warantees, or official support channels. For further questions, clarifications, or recommended additions to the documentation please reach out to Dr. Sarab Sethi by email.","title":"Contact"},{"location":"hardware/","text":"Enclosure and ports \u00b6 Overview \u00b6 Bugg's key exterior features are annotated below: Mounting wings \u00b6 Bugg can be mounted in the environment using the mounting wings, by following one of the two recommended approaches: Thread a flat strap through slots, across the back of the device, and tie it around a suitable feature in the environment (e.g., a tree trunk) Use the screw heads to bolt the device firmly to a flat surface (e.g., a wall) Of course, if required, other more creative approaches might be required. In this case, please be careful to not obscure the microphone with any mounting hardware to ensure Bugg is able to capture the best audio quality possible. Side door \u00b6 To insert or replace the microSD or nano SIM cards, undo the two thumbscrews on the side of the device to remove the white side door. Both cards should be inserted with the metal contacts facing downwards. Push the cards firmly into their respective slots until you feel a click. To remove the cards, push the cards into the device until you hear a click, then release and they will push themselves partly out of the device. You can then pull them out fully easily by hand. M12 connector \u00b6 Through a waterproof M12 connector at the bottom of Bugg, the device is able to receive power , connect to an external microphones , or expose a debugging interface. Connecting a cable \u00b6 To connect a Bugg to an M12 male cable (e.g., for power): Align the M12 male connector on the cable with the female M12 connector on Bugg Push the two connectors together firmly Screw the cable connector fully into the Bugg connector by rotating the appropriate part until there are no threads visible In the above image, the knurled ring is used to screw the two connectors together. However, the exact rotating part may vary between cable batches. Please do not skip this step, as otherwise the cable will easily fall out and the connection will not be waterproof. Pinout \u00b6 The full pinout of the Bugg M12 interface is provided below.","title":"Enclosure and ports"},{"location":"hardware/#enclosure-and-ports","text":"","title":"Enclosure and ports"},{"location":"hardware/#overview","text":"Bugg's key exterior features are annotated below:","title":"Overview"},{"location":"hardware/#mounting-wings","text":"Bugg can be mounted in the environment using the mounting wings, by following one of the two recommended approaches: Thread a flat strap through slots, across the back of the device, and tie it around a suitable feature in the environment (e.g., a tree trunk) Use the screw heads to bolt the device firmly to a flat surface (e.g., a wall) Of course, if required, other more creative approaches might be required. In this case, please be careful to not obscure the microphone with any mounting hardware to ensure Bugg is able to capture the best audio quality possible.","title":"Mounting wings"},{"location":"hardware/#side-door","text":"To insert or replace the microSD or nano SIM cards, undo the two thumbscrews on the side of the device to remove the white side door. Both cards should be inserted with the metal contacts facing downwards. Push the cards firmly into their respective slots until you feel a click. To remove the cards, push the cards into the device until you hear a click, then release and they will push themselves partly out of the device. You can then pull them out fully easily by hand.","title":"Side door"},{"location":"hardware/#m12-connector","text":"Through a waterproof M12 connector at the bottom of Bugg, the device is able to receive power , connect to an external microphones , or expose a debugging interface.","title":"M12 connector"},{"location":"hardware/#connecting-a-cable","text":"To connect a Bugg to an M12 male cable (e.g., for power): Align the M12 male connector on the cable with the female M12 connector on Bugg Push the two connectors together firmly Screw the cable connector fully into the Bugg connector by rotating the appropriate part until there are no threads visible In the above image, the knurled ring is used to screw the two connectors together. However, the exact rotating part may vary between cable batches. Please do not skip this step, as otherwise the cable will easily fall out and the connection will not be waterproof.","title":"Connecting a cable"},{"location":"hardware/#pinout","text":"The full pinout of the Bugg M12 interface is provided below.","title":"Pinout"},{"location":"leds/","text":"Status LEDs \u00b6 Overview \u00b6 Bugg communicates its status through three RGB LEDs on the front of the device, situated below the microphone. From top to bottom, the LEDs correspond to recording , connectivity , and power , respectively. When Bugg is booting, the LEDs will turn on sequentially from bottom to top, starting with just the power LED (left image below). It may take minutes for all the recording LED to activate (right panel), so please be patient. Recording LED \u00b6 The recording LED tells you whether Bugg is recording audio or not. It can be in two states: Green : Recording audio Off : Not recording audio Connectivity LED \u00b6 The connectivity LED tells you whether Bugg is connected to the internet or not. There are four states: Blue : Successfully connected to internet Cyan : Data being uploaded Red : No internet connection Off : Device booting or operating offline mode On boot, the connectivity LED will often start red as Bugg attempts to establish an internet connection, then turn blue if successful. Please remain patient, as this can occassionally take a few minutes. Please note, the internet connection is turned off in between uploads to save power, so expect short periods of connectivity in between longer periods without a connection. Power LED \u00b6 The power LED tells you whether Bugg is connected to a power source. It can be in two states: Red : Receiving power Off : Not receiving power LED error state \u00b6 If the device encounters an unexpected error, all three LEDs will flash white together until the device is powered down. When Bugg is in this error state, no data is recorded. These errors are rare and could indicate faulty hardware, microSD cards, or power connectors. For those with sufficient technical know-how, advanced debugging options are available.","title":"Status LEDs"},{"location":"leds/#status-leds","text":"","title":"Status LEDs"},{"location":"leds/#overview","text":"Bugg communicates its status through three RGB LEDs on the front of the device, situated below the microphone. From top to bottom, the LEDs correspond to recording , connectivity , and power , respectively. When Bugg is booting, the LEDs will turn on sequentially from bottom to top, starting with just the power LED (left image below). It may take minutes for all the recording LED to activate (right panel), so please be patient.","title":"Overview"},{"location":"leds/#recording-led","text":"The recording LED tells you whether Bugg is recording audio or not. It can be in two states: Green : Recording audio Off : Not recording audio","title":"Recording LED"},{"location":"leds/#connectivity-led","text":"The connectivity LED tells you whether Bugg is connected to the internet or not. There are four states: Blue : Successfully connected to internet Cyan : Data being uploaded Red : No internet connection Off : Device booting or operating offline mode On boot, the connectivity LED will often start red as Bugg attempts to establish an internet connection, then turn blue if successful. Please remain patient, as this can occassionally take a few minutes. Please note, the internet connection is turned off in between uploads to save power, so expect short periods of connectivity in between longer periods without a connection.","title":"Connectivity LED"},{"location":"leds/#power-led","text":"The power LED tells you whether Bugg is connected to a power source. It can be in two states: Red : Receiving power Off : Not receiving power","title":"Power LED"},{"location":"leds/#led-error-state","text":"If the device encounters an unexpected error, all three LEDs will flash white together until the device is powered down. When Bugg is in this error state, no data is recorded. These errors are rare and could indicate faulty hardware, microSD cards, or power connectors. For those with sufficient technical know-how, advanced debugging options are available.","title":"LED error state"},{"location":"power/","text":"Power \u00b6 Overview \u00b6 Bugg's typical power draw is between 1-2W, with transient peaks of up to 5W. Exact power usage numbers will depend on a number of use-case specific variables, including input voltage, recording settings, mobile signal strength, etc. Bugg has no internal batteries, and therefore DC power must be supplied through the M12 connector at the bottom of the device, or via USB (for testing only). Please note, power sources must be sourced by users independently . The information on this page will help in choosing suitable equipment, but there is no official Bugg battery or solar equipment. Batteries and renewables \u00b6 WARNING Whilst completely safe if appropriate precautions are taken, please note that live voltages from batteries and renewable power sources (e.g., solar panels) can be dangerous. The instructions listed here assume the user has prior experience working with similar equipment, and do not cover all the potential risks and hazards. If you do not have experience, please seek assistance from someone with the appropriate skills. Bugg can be powered from any battery designed to deliver a stable 7-36V DC output (e.g., car batteries, motorcycle batteries, off-grid power sources). However, to get long unattended deployments without extremely heavy batteries, we recommend the use of renewable off-grid power sources to continuously top-up batteries during deployments. Solar powered deployments \u00b6 Solar power is the most common choice for powering long-duration Bugg deployments. Here we provide guidance for the basic elements needed to deploy a solar powered Bugg device for year-round 24/7 data collection from an uncovered area in the UK. When deploying devices in other locations (e.g., with longer or shorter daylight hours), or where there are occlusions to sunlight (e.g., from leaves in the canopy), adjustments will likely be necessary. You will first need to acquire the following equipment (in addition to the Bugg and its power cable): Solar panel (50-100W) Solar panel mount (e.g., aluminium frame) Deep-cycle battery (24Ah, 12V) Solar charge controller Box for battery and charge controller Spare wiring Then, to deploy a solar powered Bugg device, simply mount the solar panel in the desired orientation, and connect the solar panel, battery, and Bugg power cable to the charge controller, and ensure the battery and charge controller are in a waterproof location (e.g., inside a sealed box). Some solar charge controllers have multiple modes. Please ensure yours is configured for 24 hour operation (most often the default setting). USB \u00b6 For testing, Bugg devices can be powered by USB at 5V by connecting USB power through the appropriate pins of the M12 connector. However, this is potentially unstable and may result in a decrease in audio quality, so is not recommended when deploying devices. Please ensure the USB power source can deliver at least 2A at 5V (e.g., most power banks).","title":"Power"},{"location":"power/#power","text":"","title":"Power"},{"location":"power/#overview","text":"Bugg's typical power draw is between 1-2W, with transient peaks of up to 5W. Exact power usage numbers will depend on a number of use-case specific variables, including input voltage, recording settings, mobile signal strength, etc. Bugg has no internal batteries, and therefore DC power must be supplied through the M12 connector at the bottom of the device, or via USB (for testing only). Please note, power sources must be sourced by users independently . The information on this page will help in choosing suitable equipment, but there is no official Bugg battery or solar equipment.","title":"Overview"},{"location":"power/#batteries-and-renewables","text":"WARNING Whilst completely safe if appropriate precautions are taken, please note that live voltages from batteries and renewable power sources (e.g., solar panels) can be dangerous. The instructions listed here assume the user has prior experience working with similar equipment, and do not cover all the potential risks and hazards. If you do not have experience, please seek assistance from someone with the appropriate skills. Bugg can be powered from any battery designed to deliver a stable 7-36V DC output (e.g., car batteries, motorcycle batteries, off-grid power sources). However, to get long unattended deployments without extremely heavy batteries, we recommend the use of renewable off-grid power sources to continuously top-up batteries during deployments.","title":"Batteries and renewables"},{"location":"power/#solar-powered-deployments","text":"Solar power is the most common choice for powering long-duration Bugg deployments. Here we provide guidance for the basic elements needed to deploy a solar powered Bugg device for year-round 24/7 data collection from an uncovered area in the UK. When deploying devices in other locations (e.g., with longer or shorter daylight hours), or where there are occlusions to sunlight (e.g., from leaves in the canopy), adjustments will likely be necessary. You will first need to acquire the following equipment (in addition to the Bugg and its power cable): Solar panel (50-100W) Solar panel mount (e.g., aluminium frame) Deep-cycle battery (24Ah, 12V) Solar charge controller Box for battery and charge controller Spare wiring Then, to deploy a solar powered Bugg device, simply mount the solar panel in the desired orientation, and connect the solar panel, battery, and Bugg power cable to the charge controller, and ensure the battery and charge controller are in a waterproof location (e.g., inside a sealed box). Some solar charge controllers have multiple modes. Please ensure yours is configured for 24 hour operation (most often the default setting).","title":"Solar powered deployments"},{"location":"power/#usb","text":"For testing, Bugg devices can be powered by USB at 5V by connecting USB power through the appropriate pins of the M12 connector. However, this is potentially unstable and may result in a decrease in audio quality, so is not recommended when deploying devices. Please ensure the USB power source can deliver at least 2A at 5V (e.g., most power banks).","title":"USB"},{"location":"quickstart/","text":"Quick start \u00b6 Equipment \u00b6 First, make sure you have all the required equipment: Bugg device and power cable MicroSD card Nano SIM with mobile internet Power source (5-36V DC, e.g., from mains or renewables) MicroSD cards, nano SIMs, and power sources must be sourced independently (i.e., are not provided with Bugg devices). Deployment \u00b6 Then, set up and deploy a device with the following steps: Set up a microSD card with your Bugg configuration Put the SD card and a SIM into the device Mount Bugg and connect it to a power source Wait for the Bugg to boot and check the status lights Check your server for real-time audio data To run a Bugg fully offline (e.g., where there is no mobile coverage), simply leave the nano SIM slot empty and audio will be recorded locally to the micro SD card.","title":"Quick start"},{"location":"quickstart/#quick-start","text":"","title":"Quick start"},{"location":"quickstart/#equipment","text":"First, make sure you have all the required equipment: Bugg device and power cable MicroSD card Nano SIM with mobile internet Power source (5-36V DC, e.g., from mains or renewables) MicroSD cards, nano SIMs, and power sources must be sourced independently (i.e., are not provided with Bugg devices).","title":"Equipment"},{"location":"quickstart/#deployment","text":"Then, set up and deploy a device with the following steps: Set up a microSD card with your Bugg configuration Put the SD card and a SIM into the device Mount Bugg and connect it to a power source Wait for the Bugg to boot and check the status lights Check your server for real-time audio data To run a Bugg fully offline (e.g., where there is no mobile coverage), simply leave the nano SIM slot empty and audio will be recorded locally to the micro SD card.","title":"Deployment"},{"location":"time/","text":"Time \u00b6 Bugg uses UTC time, regardless of the timezone in which the device is deployed. Recorded audio files are stored with timestamps corresponding to the start time of each recording. Internet time updates \u00b6 When possible, Bugg updates its internal clock using the internet connection. Specifically, it uses the NTP server ntp.ubuntu.com . The time is updated every time a data upload is attempted, so clock drift is negligible even over extended deployments. Real-time clock \u00b6 Bugg has a built in real-time clock (RTC) which allows it to keep time without a power source when the device is running offline . When in online mode the RTC is ignored and the internet time is used. Real-time clock battery \u00b6 In normal operation, the RTC is powered by a CR1220 coin cell battery which is topped up by Bugg's power source when available. Therefore, as long as devices are used regularly the RTC should not require any maintenance. If a device is left unused for a long time (e.g., years), then the RTC battery may run out. If you intend on only deploying the device in online mode, then this is not a problem as the internet time is used. However, for offline deployments, the battery must be replaced. To replace the battery, the device must be opened up by undoing the four screws on the back and a new CR1220 coin cell battery should be inserted. Bugg should be run in online mode at least once after a new battery is inserted so the correct time can be fetched from the intenet and set to the RTC.","title":"Time"},{"location":"time/#time","text":"Bugg uses UTC time, regardless of the timezone in which the device is deployed. Recorded audio files are stored with timestamps corresponding to the start time of each recording.","title":"Time"},{"location":"time/#internet-time-updates","text":"When possible, Bugg updates its internal clock using the internet connection. Specifically, it uses the NTP server ntp.ubuntu.com . The time is updated every time a data upload is attempted, so clock drift is negligible even over extended deployments.","title":"Internet time updates"},{"location":"time/#real-time-clock","text":"Bugg has a built in real-time clock (RTC) which allows it to keep time without a power source when the device is running offline . When in online mode the RTC is ignored and the internet time is used.","title":"Real-time clock"},{"location":"time/#real-time-clock-battery","text":"In normal operation, the RTC is powered by a CR1220 coin cell battery which is topped up by Bugg's power source when available. Therefore, as long as devices are used regularly the RTC should not require any maintenance. If a device is left unused for a long time (e.g., years), then the RTC battery may run out. If you intend on only deploying the device in online mode, then this is not a problem as the internet time is used. However, for offline deployments, the battery must be replaced. To replace the battery, the device must be opened up by undoing the four screws on the back and a new CR1220 coin cell battery should be inserted. Bugg should be run in online mode at least once after a new battery is inserted so the correct time can be fetched from the intenet and set to the RTC.","title":"Real-time clock battery"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 FAQs \u00b6 Which microSD card should I use? \u00b6 There is no specific type of microSD card required, but we recommend using higher quality products from known brands (e.g., SanDisk) for best reliability. How large should the microSD card be? \u00b6 Continuous recording of MP3 compressed data (default behaviour) produces ~1.2GB audio per day. For online deployments, the microSD only serves as a temporary backup in between recording and transmitting of files, or as a backup if connectivity drops temporarily. Therefore, a 16GB microSD is normally sufficient. For offline deployments, card size should be calculated based on expected time between visits to retrieve data. Buggs running offline with 256GB microSD cards have been extensively tested, but larger options should work too. The timestamp of recorded files is incorrect \u00b6 If there is a consistent offset in the time , please note Bugg uses UTC regardless of where the device is deployed. Timestamps of files must be manually adjusted after data is transmitted/retrieved from the microSD card to apply local timezone shifts. If all files are displaying timestamps from the same day, this indicates the real-time clock battery has run out. If offline deployments are required, follow instructions to replace the battery . The mobile internet doesn't work \u00b6 The first thing to do is to confirm that the nano SIM card provides a functioning internet connection when put into a mobile phone at the same location, and that the signal is strong enough to browse the internet comfortably. Then try loading a few different APN settings in the configuration file. Often when searching online, it is possible to find different settings for the same provider depending on the website being used. Finally, if all else fails, try a different SIM card from another provider or using a different data plan. Buggs have been successfully deployed with internet connections in UK, Norway, Mexico, Taiwan, and beyond, so whilst speeds and connectivity strength may vary locally, devices should be able to connect to mobile networks globally. The device stops recording/transmiting data during certain hours of the day \u00b6 This is common when using solar panels which are not receiving enough power to fully recharge the battery. Overnight, once the battery reserve is depleted, Bugg will stop receiving power and shutdown. Recording will only resume once there is sufficient sunlight in the morning to power up the device. One potential solution is to make sure the solar panels are oriented in the direction that receives the most direct sunlight possible throughout the day. There are plenty of online resources which can advise on optimal orientation. Also ensure that your battery is large enough to last a day and that it is a deep-cycle battery. When using batteries that are not designed for deep-cycle usage (e.g., car batteries) with solar power setups, the effective capacity of the battery can be severely reduced. A final option is to install a larger solar panel to capture more energy during daylight hours. This is normally neccessary when the panel is deployed in an area which doesn't receive much direct sunlight (e.g., under a forest canopy, or on a shaded mountain side). Advanced troubleshooting \u00b6 For those comfortable with embedded systems development using Raspberry Pis, you can try to debug the device from the Pi's command line using the USB serial interface.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#faqs","text":"","title":"FAQs"},{"location":"troubleshooting/#which-microsd-card-should-i-use","text":"There is no specific type of microSD card required, but we recommend using higher quality products from known brands (e.g., SanDisk) for best reliability.","title":"Which microSD card should I use?"},{"location":"troubleshooting/#how-large-should-the-microsd-card-be","text":"Continuous recording of MP3 compressed data (default behaviour) produces ~1.2GB audio per day. For online deployments, the microSD only serves as a temporary backup in between recording and transmitting of files, or as a backup if connectivity drops temporarily. Therefore, a 16GB microSD is normally sufficient. For offline deployments, card size should be calculated based on expected time between visits to retrieve data. Buggs running offline with 256GB microSD cards have been extensively tested, but larger options should work too.","title":"How large should the microSD card be?"},{"location":"troubleshooting/#the-timestamp-of-recorded-files-is-incorrect","text":"If there is a consistent offset in the time , please note Bugg uses UTC regardless of where the device is deployed. Timestamps of files must be manually adjusted after data is transmitted/retrieved from the microSD card to apply local timezone shifts. If all files are displaying timestamps from the same day, this indicates the real-time clock battery has run out. If offline deployments are required, follow instructions to replace the battery .","title":"The timestamp of recorded files is incorrect"},{"location":"troubleshooting/#the-mobile-internet-doesnt-work","text":"The first thing to do is to confirm that the nano SIM card provides a functioning internet connection when put into a mobile phone at the same location, and that the signal is strong enough to browse the internet comfortably. Then try loading a few different APN settings in the configuration file. Often when searching online, it is possible to find different settings for the same provider depending on the website being used. Finally, if all else fails, try a different SIM card from another provider or using a different data plan. Buggs have been successfully deployed with internet connections in UK, Norway, Mexico, Taiwan, and beyond, so whilst speeds and connectivity strength may vary locally, devices should be able to connect to mobile networks globally.","title":"The mobile internet doesn't work"},{"location":"troubleshooting/#the-device-stops-recordingtransmiting-data-during-certain-hours-of-the-day","text":"This is common when using solar panels which are not receiving enough power to fully recharge the battery. Overnight, once the battery reserve is depleted, Bugg will stop receiving power and shutdown. Recording will only resume once there is sufficient sunlight in the morning to power up the device. One potential solution is to make sure the solar panels are oriented in the direction that receives the most direct sunlight possible throughout the day. There are plenty of online resources which can advise on optimal orientation. Also ensure that your battery is large enough to last a day and that it is a deep-cycle battery. When using batteries that are not designed for deep-cycle usage (e.g., car batteries) with solar power setups, the effective capacity of the battery can be severely reduced. A final option is to install a larger solar panel to capture more energy during daylight hours. This is normally neccessary when the panel is deployed in an area which doesn't receive much direct sunlight (e.g., under a forest canopy, or on a shaded mountain side).","title":"The device stops recording/transmiting data during certain hours of the day"},{"location":"troubleshooting/#advanced-troubleshooting","text":"For those comfortable with embedded systems development using Raspberry Pis, you can try to debug the device from the Pi's command line using the USB serial interface.","title":"Advanced troubleshooting"}]}